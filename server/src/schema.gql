# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type job {
  """Example field (placeholder)"""
  id: ID!

  """Example field (placeholder)"""
  title: String!

  """Example field (placeholder)"""
  description: String!

  """Example field (placeholder)"""
  expirationDate: Timestamp!
  contact: String!
  location: String!

  """Example field (placeholder)"""
  postDate: Timestamp!

  """Example field (placeholder)"""
  updatedAt: Timestamp!
  postedById: ID!
  postedBy: user!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type rave {
  id: ID!

  """Example field (placeholder)"""
  followerId: Int!

  """Example field (placeholder)"""
  followingId: Int!
  follower: user!
  following: user!
}

type Review {
  id: ID!
  review: String!

  """Example field (placeholder)"""
  postDate: Timestamp!

  """Example field (placeholder)"""
  updatedAt: Timestamp!
  userId: ID!
  packId: ID!
  user: user!
  pack: pack!
}

type user {
  id: ID!
  email: String!
  password: String!
  emailVerified: Boolean
  image: String
  name: String!
  about: String
  authorizer: Authorizer!
  role: String!

  """Example field (placeholder)"""
  postDate: Timestamp!

  """Example field (placeholder)"""
  updatedAt: Timestamp!
  jobs(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: jobFilter = {}

    """Specify to sort results."""
    sorting: [jobSort!] = []
  ): UserJobsConnection!
  packs(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: packFilter = {}

    """Specify to sort results."""
    sorting: [packSort!] = []
  ): UserPacksConnection!
  followers(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: raveFilter = {}

    """Specify to sort results."""
    sorting: [raveSort!] = []
  ): UserFollowersConnection!
  followings(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: raveFilter = {}

    """Specify to sort results."""
    sorting: [raveSort!] = []
  ): UserFollowingsConnection!
  payments(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: paymentFilter = {}

    """Specify to sort results."""
    sorting: [paymentSort!] = []
  ): UserPaymentsConnection!
  reviews(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ReviewFilter = {}

    """Specify to sort results."""
    sorting: [ReviewSort!] = []
  ): UserReviewsConnection!
}

enum Authorizer {
  GOOGLE
  FACEBOOK
  LOCAL
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input jobFilter {
  and: [jobFilter!]
  or: [jobFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  expirationDate: TimestampFieldComparison
  location: StringFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  postedById: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input TimestampFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Timestamp
  neq: Timestamp
  gt: Timestamp
  gte: Timestamp
  lt: Timestamp
  lte: Timestamp
  in: [Timestamp!]
  notIn: [Timestamp!]
  between: TimestampFieldComparisonBetween
  notBetween: TimestampFieldComparisonBetween
}

input TimestampFieldComparisonBetween {
  lower: Timestamp!
  upper: Timestamp!
}

input jobSort {
  field: jobSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum jobSortFields {
  id
  title
  expirationDate
  location
  postDate
  updatedAt
  postedById
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input packFilter {
  and: [packFilter!]
  or: [packFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  price: FloatFieldComparison
  type: PacketTypeFilterComparison
  isLoop: BooleanFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  authorId: IDFilterComparison
}

input FloatFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: FloatFieldComparisonBetween
  notBetween: FloatFieldComparisonBetween
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input PacketTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: PacketType
  neq: PacketType
  gt: PacketType
  gte: PacketType
  lt: PacketType
  lte: PacketType
  like: PacketType
  notLike: PacketType
  iLike: PacketType
  notILike: PacketType
  in: [PacketType!]
  notIn: [PacketType!]
}

enum PacketType {
  FREE
  PAID
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input packSort {
  field: packSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum packSortFields {
  id
  name
  price
  type
  isLoop
  postDate
  updatedAt
  authorId
}

input raveFilter {
  and: [raveFilter!]
  or: [raveFilter!]
  id: IDFilterComparison
  followerId: IntFieldComparison
  followingId: IntFieldComparison
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input raveSort {
  field: raveSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum raveSortFields {
  id
  followerId
  followingId
}

input paymentFilter {
  and: [paymentFilter!]
  or: [paymentFilter!]
  id: IDFilterComparison
  type: PlanTypeFilterComparison
  price: IntFieldComparison
  planStartDate: TimestampFieldComparison
  planEndDate: TimestampFieldComparison
  paymentMode: PaymentModelFilterComparison
  isActive: PaymentIsActiveFilterComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  packId: IDFilterComparison
  paymentPlanId: IDFilterComparison
  userId: IDFilterComparison
}

input PlanTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: PlanType
  neq: PlanType
  gt: PlanType
  gte: PlanType
  lt: PlanType
  lte: PlanType
  like: PlanType
  notLike: PlanType
  iLike: PlanType
  notILike: PlanType
  in: [PlanType!]
  notIn: [PlanType!]
}

enum PlanType {
  subscription
  buy
}

input PaymentModelFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: PaymentModel
  neq: PaymentModel
  gt: PaymentModel
  gte: PaymentModel
  lt: PaymentModel
  lte: PaymentModel
  like: PaymentModel
  notLike: PaymentModel
  iLike: PaymentModel
  notILike: PaymentModel
  in: [PaymentModel!]
  notIn: [PaymentModel!]
}

enum PaymentModel {
  PayPal
  MoPay
  Gift
}

input PaymentIsActiveFilterComparison {
  eq: Boolean
}

input paymentSort {
  field: paymentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum paymentSortFields {
  id
  type
  price
  planStartDate
  planEndDate
  paymentMode
  isActive
  postDate
  updatedAt
  packId
  paymentPlanId
  userId
}

input ReviewFilter {
  and: [ReviewFilter!]
  or: [ReviewFilter!]
  id: IDFilterComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  userId: IDFilterComparison
  packId: IDFilterComparison
}

input ReviewSort {
  field: ReviewSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ReviewSortFields {
  id
  postDate
  updatedAt
  userId
  packId
}

type paymentplan {
  """Example field (placeholder)"""
  id: ID!

  """Example field (placeholder)"""
  title: String!

  """Example field (placeholder)"""
  description: String!

  """Example field (placeholder)"""
  amount: Float!

  """Example field (placeholder)"""
  month: Int!

  """Example field (placeholder)"""
  postDate: Timestamp!

  """Example field (placeholder)"""
  updatedAt: Timestamp!
  postedById: ID!

  """Example filed (placeholder)"""
  isActive: Boolean!
  postedBy: user!
  payments(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: paymentFilter = {}

    """Specify to sort results."""
    sorting: [paymentSort!] = []
  ): PaymentplanPaymentsConnection!
}

type payment {
  """Example field (placeholder)"""
  id: ID!

  """Example field (placeholder)"""
  type: PlanType!

  """Example filed (placeholder)"""
  price: Int!

  """Example filed (placeholder)"""
  planStartDate: Timestamp!

  """Example filed (placeholder)"""
  planEndDate: Timestamp!

  """Example filed (placeholder)"""
  paymentMode: PaymentModel!

  """Example filed (placeholder)"""
  confirmationToken: String

  """Example filed (placeholder)"""
  isActive: Boolean!

  """Example field (placeholder)"""
  postDate: Timestamp!

  """Example field (placeholder)"""
  updatedAt: Timestamp!
  packId: ID!
  paymentPlanId: ID!
  userId: ID!
  pack: pack!
  paymentPlan: paymentplan!
  user: user!
}

type pack {
  """Example field (placeholder)"""
  id: ID!

  """Example field (placeholder)"""
  name: String!

  """Example field (placeholder)"""
  price: Float!

  """Example field (placeholder)"""
  description: String!

  """Example field (placeholder)"""
  type: PacketType!
  isLoop: Boolean!

  """Example field (placeholder)"""
  postDate: Timestamp!

  """Example field (placeholder)"""
  updatedAt: Timestamp!
  authorId: ID!
  author: user!
  audio(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: loopFilter = {}

    """Specify to sort results."""
    sorting: [loopSort!] = []
  ): PackAudioConnection!
  payments(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: paymentFilter = {}

    """Specify to sort results."""
    sorting: [paymentSort!] = []
  ): PackPaymentsConnection!
  reviews(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: paymentFilter = {}

    """Specify to sort results."""
    sorting: [paymentSort!] = []
  ): PackReviewsConnection!
}

input loopFilter {
  and: [loopFilter!]
  or: [loopFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  genre: StringFieldComparison
  bpm: IntFieldComparison
  audioType: AudioTypeFilterComparison
  key: StringFieldComparison
  tempo: IntFieldComparison
  packId: IDFilterComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  pack: loopFilterpackFilter
}

input AudioTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: AudioType
  neq: AudioType
  gt: AudioType
  gte: AudioType
  lt: AudioType
  lte: AudioType
  like: AudioType
  notLike: AudioType
  iLike: AudioType
  notILike: AudioType
  in: [AudioType!]
  notIn: [AudioType!]
}

enum AudioType {
  oneshot
  loop
}

input loopFilterpackFilter {
  and: [loopFilterpackFilter!]
  or: [loopFilterpackFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  price: FloatFieldComparison
  type: PacketTypeFilterComparison
  isLoop: BooleanFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  authorId: IDFilterComparison
}

input loopSort {
  field: loopSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum loopSortFields {
  id
  name
  genre
  bpm
  audioType
  key
  tempo
  packId
  postDate
  updatedAt
}

type loop {
  """Example field (placeholder)"""
  id: ID!

  """Example field (placeholder)"""
  name: String!

  """Example field (placeholder)"""
  genre: String!

  """Example field (placeholder)"""
  bpm: Int!

  """Example field (placeholder)"""
  path: String!

  """Example field (placeholder)"""
  audioType: AudioType!

  """Example field (placeholder)"""
  key: String!

  """Example field (placeholder)"""
  tempo: Int!
  packId: ID!

  """Example field (placeholder)"""
  postDate: Timestamp!

  """Example field (placeholder)"""
  updatedAt: Timestamp!
  pack: pack!
}

type grant {
  """Example field (placeholder)"""
  id: ID!

  """Example field (placeholder)"""
  role: String!

  """Example field (placeholder)"""
  resource: String!
  action: GrantActions!

  """
  
      all attributes => ['*'],
      all attributes except specific fields => ['*', '!id']
      only selected attributes => ['id', 'name']
      
  """
  attributes: String!

  """Example field (placeholder)"""
  postDate: Timestamp!

  """Example field (placeholder)"""
  updatedAt: Timestamp!
  postedById: ID!
}

enum GrantActions {
  createAny
  createOwn
  readAny
  readOwn
  updateAny
  updateOwn
  deleteAny
  deleteOwn
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type LoopDeleteResponse {
  """Example field (placeholder)"""
  id: ID

  """Example field (placeholder)"""
  name: String

  """Example field (placeholder)"""
  genre: String

  """Example field (placeholder)"""
  bpm: Int

  """Example field (placeholder)"""
  path: String

  """Example field (placeholder)"""
  audioType: AudioType

  """Example field (placeholder)"""
  key: String

  """Example field (placeholder)"""
  tempo: Int
  packId: ID

  """Example field (placeholder)"""
  postDate: Timestamp

  """Example field (placeholder)"""
  updatedAt: Timestamp
}

type loopEdge {
  """The node containing the loop"""
  node: loop!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type LoopConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [loopEdge!]!
}

type loopAggregateGroupBy {
  id: ID
  name: String
  genre: String
  bpm: Int
  audioType: AudioType
  key: String
  tempo: Int
  packId: ID
  postDate: Timestamp
  updatedAt: Timestamp
}

type loopCountAggregate {
  id: Int
  name: Int
  genre: Int
  bpm: Int
  audioType: Int
  key: Int
  tempo: Int
  packId: Int
  postDate: Int
  updatedAt: Int
}

type loopSumAggregate {
  id: Float
  bpm: Float
  tempo: Float
  packId: Float
}

type loopAvgAggregate {
  id: Float
  bpm: Float
  tempo: Float
  packId: Float
}

type loopMinAggregate {
  id: ID
  name: String
  genre: String
  bpm: Int
  audioType: AudioType
  key: String
  tempo: Int
  packId: ID
  postDate: Timestamp
  updatedAt: Timestamp
}

type loopMaxAggregate {
  id: ID
  name: String
  genre: String
  bpm: Int
  audioType: AudioType
  key: String
  tempo: Int
  packId: ID
  postDate: Timestamp
  updatedAt: Timestamp
}

type JobDeleteResponse {
  """Example field (placeholder)"""
  id: ID

  """Example field (placeholder)"""
  title: String

  """Example field (placeholder)"""
  description: String

  """Example field (placeholder)"""
  expirationDate: Timestamp
  contact: String
  location: String

  """Example field (placeholder)"""
  postDate: Timestamp

  """Example field (placeholder)"""
  updatedAt: Timestamp
  postedById: ID
}

type jobEdge {
  """The node containing the job"""
  node: job!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type JobConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [jobEdge!]!
}

type jobAggregateGroupBy {
  id: ID
  title: String
  expirationDate: Timestamp
  location: String
  postDate: Timestamp
  updatedAt: Timestamp
  postedById: ID
}

type jobCountAggregate {
  id: Int
  title: Int
  expirationDate: Int
  location: Int
  postDate: Int
  updatedAt: Int
  postedById: Int
}

type jobSumAggregate {
  id: Float
  postedById: Float
}

type jobAvgAggregate {
  id: Float
  postedById: Float
}

type jobMinAggregate {
  id: ID
  title: String
  expirationDate: Timestamp
  location: String
  postDate: Timestamp
  updatedAt: Timestamp
  postedById: ID
}

type jobMaxAggregate {
  id: ID
  title: String
  expirationDate: Timestamp
  location: String
  postDate: Timestamp
  updatedAt: Timestamp
  postedById: ID
}

type PackDeleteResponse {
  """Example field (placeholder)"""
  id: ID

  """Example field (placeholder)"""
  name: String

  """Example field (placeholder)"""
  price: Float

  """Example field (placeholder)"""
  description: String

  """Example field (placeholder)"""
  type: PacketType
  isLoop: Boolean

  """Example field (placeholder)"""
  postDate: Timestamp

  """Example field (placeholder)"""
  updatedAt: Timestamp
  authorId: ID
}

type packEdge {
  """The node containing the pack"""
  node: pack!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PackConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [packEdge!]!
}

type packAggregateGroupBy {
  id: ID
  name: String
  price: Float
  type: PacketType
  isLoop: Boolean
  postDate: Timestamp
  updatedAt: Timestamp
  authorId: ID
}

type packCountAggregate {
  id: Int
  name: Int
  price: Int
  type: Int
  isLoop: Int
  postDate: Int
  updatedAt: Int
  authorId: Int
}

type packSumAggregate {
  id: Float
  price: Float
  authorId: Float
}

type packAvgAggregate {
  id: Float
  price: Float
  authorId: Float
}

type packMinAggregate {
  id: ID
  name: String
  price: Float
  type: PacketType
  postDate: Timestamp
  updatedAt: Timestamp
  authorId: ID
}

type packMaxAggregate {
  id: ID
  name: String
  price: Float
  type: PacketType
  postDate: Timestamp
  updatedAt: Timestamp
  authorId: ID
}

type paymentEdge {
  """The node containing the payment"""
  node: payment!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PackReviewsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [paymentEdge!]!
}

type PackPaymentsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [paymentEdge!]!
}

type PackAudioConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [loopEdge!]!
}

type PaymentplanDeleteResponse {
  """Example field (placeholder)"""
  id: ID

  """Example field (placeholder)"""
  title: String

  """Example field (placeholder)"""
  description: String

  """Example field (placeholder)"""
  amount: Float

  """Example field (placeholder)"""
  month: Int

  """Example field (placeholder)"""
  postDate: Timestamp

  """Example field (placeholder)"""
  updatedAt: Timestamp
  postedById: ID

  """Example filed (placeholder)"""
  isActive: Boolean
}

type paymentplanEdge {
  """The node containing the paymentplan"""
  node: paymentplan!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PaymentplanConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [paymentplanEdge!]!
}

type paymentplanAggregateGroupBy {
  id: ID
  title: String
  amount: Float
  postDate: Timestamp
  updatedAt: Timestamp
  postedById: ID
  isActive: Boolean
}

type paymentplanCountAggregate {
  id: Int
  title: Int
  amount: Int
  postDate: Int
  updatedAt: Int
  postedById: Int
  isActive: Int
}

type paymentplanSumAggregate {
  id: Float
  amount: Float
  postedById: Float
}

type paymentplanAvgAggregate {
  id: Float
  amount: Float
  postedById: Float
}

type paymentplanMinAggregate {
  id: ID
  title: String
  amount: Float
  postDate: Timestamp
  updatedAt: Timestamp
  postedById: ID
}

type paymentplanMaxAggregate {
  id: ID
  title: String
  amount: Float
  postDate: Timestamp
  updatedAt: Timestamp
  postedById: ID
}

type PaymentplanPaymentsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [paymentEdge!]!
}

type PaymentDeleteResponse {
  """Example field (placeholder)"""
  id: ID

  """Example field (placeholder)"""
  type: PlanType

  """Example filed (placeholder)"""
  price: Int

  """Example filed (placeholder)"""
  planStartDate: Timestamp

  """Example filed (placeholder)"""
  planEndDate: Timestamp

  """Example filed (placeholder)"""
  paymentMode: PaymentModel

  """Example filed (placeholder)"""
  confirmationToken: String

  """Example filed (placeholder)"""
  isActive: Boolean

  """Example field (placeholder)"""
  postDate: Timestamp

  """Example field (placeholder)"""
  updatedAt: Timestamp
  packId: ID
  paymentPlanId: ID
  userId: ID
}

type PaymentConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [paymentEdge!]!
}

type paymentAggregateGroupBy {
  id: ID
  type: PlanType
  price: Int
  planStartDate: Timestamp
  planEndDate: Timestamp
  paymentMode: PaymentModel
  isActive: Boolean
  postDate: Timestamp
  updatedAt: Timestamp
  packId: ID
  paymentPlanId: ID
  userId: ID
}

type paymentCountAggregate {
  id: Int
  type: Int
  price: Int
  planStartDate: Int
  planEndDate: Int
  paymentMode: Int
  isActive: Int
  postDate: Int
  updatedAt: Int
  packId: Int
  paymentPlanId: Int
  userId: Int
}

type paymentSumAggregate {
  id: Float
  price: Float
  packId: Float
  paymentPlanId: Float
  userId: Float
}

type paymentAvgAggregate {
  id: Float
  price: Float
  packId: Float
  paymentPlanId: Float
  userId: Float
}

type paymentMinAggregate {
  id: ID
  type: PlanType
  price: Int
  planStartDate: Timestamp
  planEndDate: Timestamp
  paymentMode: PaymentModel
  postDate: Timestamp
  updatedAt: Timestamp
  packId: ID
  paymentPlanId: ID
  userId: ID
}

type paymentMaxAggregate {
  id: ID
  type: PlanType
  price: Int
  planStartDate: Timestamp
  planEndDate: Timestamp
  paymentMode: PaymentModel
  postDate: Timestamp
  updatedAt: Timestamp
  packId: ID
  paymentPlanId: ID
  userId: ID
}

type RaveDeleteResponse {
  id: ID

  """Example field (placeholder)"""
  followerId: Int

  """Example field (placeholder)"""
  followingId: Int
}

type raveEdge {
  """The node containing the rave"""
  node: rave!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type RaveConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [raveEdge!]!
}

type raveAggregateGroupBy {
  id: ID
  followerId: Int
  followingId: Int
}

type raveCountAggregate {
  id: Int
  followerId: Int
  followingId: Int
}

type raveSumAggregate {
  id: Float
  followerId: Float
  followingId: Float
}

type raveAvgAggregate {
  id: Float
  followerId: Float
  followingId: Float
}

type raveMinAggregate {
  id: ID
  followerId: Int
  followingId: Int
}

type raveMaxAggregate {
  id: ID
  followerId: Int
  followingId: Int
}

type UserDeleteResponse {
  id: ID
  email: String
  password: String
  emailVerified: Boolean
  image: String
  name: String
  about: String
  authorizer: Authorizer
  role: String

  """Example field (placeholder)"""
  postDate: Timestamp

  """Example field (placeholder)"""
  updatedAt: Timestamp
}

type userEdge {
  """The node containing the user"""
  node: user!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type UserConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [userEdge!]!
}

type userAggregateGroupBy {
  id: ID
  email: String
  name: String
  postDate: Timestamp
  updatedAt: Timestamp
}

type userCountAggregate {
  id: Int
  email: Int
  name: Int
  postDate: Int
  updatedAt: Int
}

type userSumAggregate {
  id: Float
}

type userAvgAggregate {
  id: Float
}

type userMinAggregate {
  id: ID
  email: String
  name: String
  postDate: Timestamp
  updatedAt: Timestamp
}

type userMaxAggregate {
  id: ID
  email: String
  name: String
  postDate: Timestamp
  updatedAt: Timestamp
}

type ReviewEdge {
  """The node containing the Review"""
  node: Review!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type UserReviewsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ReviewEdge!]!
}

type UserPaymentsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [paymentEdge!]!
}

type UserFollowingsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [raveEdge!]!
}

type UserFollowersConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [raveEdge!]!
}

type UserPacksConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [packEdge!]!
}

type UserJobsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [jobEdge!]!
}

type ReviewDeleteResponse {
  id: ID
  review: String

  """Example field (placeholder)"""
  postDate: Timestamp

  """Example field (placeholder)"""
  updatedAt: Timestamp
  userId: ID
  packId: ID
}

type ReviewConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ReviewEdge!]!
}

type ReviewAggregateGroupBy {
  id: ID
  postDate: Timestamp
  updatedAt: Timestamp
  userId: ID
  packId: ID
}

type ReviewCountAggregate {
  id: Int
  postDate: Int
  updatedAt: Int
  userId: Int
  packId: Int
}

type ReviewSumAggregate {
  id: Float
  userId: Float
  packId: Float
}

type ReviewAvgAggregate {
  id: Float
  userId: Float
  packId: Float
}

type ReviewMinAggregate {
  id: ID
  postDate: Timestamp
  updatedAt: Timestamp
  userId: ID
  packId: ID
}

type ReviewMaxAggregate {
  id: ID
  postDate: Timestamp
  updatedAt: Timestamp
  userId: ID
  packId: ID
}

type GrantDeleteResponse {
  """Example field (placeholder)"""
  id: ID

  """Example field (placeholder)"""
  role: String

  """Example field (placeholder)"""
  resource: String
  action: GrantActions

  """
  
      all attributes => ['*'],
      all attributes except specific fields => ['*', '!id']
      only selected attributes => ['id', 'name']
      
  """
  attributes: String

  """Example field (placeholder)"""
  postDate: Timestamp

  """Example field (placeholder)"""
  updatedAt: Timestamp
  postedById: ID
}

type grantEdge {
  """The node containing the grant"""
  node: grant!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type GrantConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [grantEdge!]!
}

type grantAggregateGroupBy {
  id: ID
  role: String
  resource: String
  action: GrantActions
  attributes: String
  postDate: Timestamp
  updatedAt: Timestamp
  postedById: ID
}

type grantCountAggregate {
  id: Int
  role: Int
  resource: Int
  action: Int
  attributes: Int
  postDate: Int
  updatedAt: Int
  postedById: Int
}

type grantSumAggregate {
  id: Float
  postedById: Float
}

type grantAvgAggregate {
  id: Float
  postedById: Float
}

type grantMinAggregate {
  id: ID
  role: String
  resource: String
  action: GrantActions
  attributes: String
  postDate: Timestamp
  updatedAt: Timestamp
  postedById: ID
}

type grantMaxAggregate {
  id: ID
  role: String
  resource: String
  action: GrantActions
  attributes: String
  postDate: Timestamp
  updatedAt: Timestamp
  postedById: ID
}

type Query {
  loop(
    """The id of the record to find."""
    id: ID!
  ): loop
  loops(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: loopFilter = {}

    """Specify to sort results."""
    sorting: [loopSort!] = []
  ): LoopConnection!
  job(
    """The id of the record to find."""
    id: ID!
  ): job
  jobs(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: jobFilter = {}

    """Specify to sort results."""
    sorting: [jobSort!] = []
  ): JobConnection!
  pack(
    """The id of the record to find."""
    id: ID!
  ): pack
  packs(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: packFilter = {}

    """Specify to sort results."""
    sorting: [packSort!] = []
  ): PackConnection!
  paymentplan(
    """The id of the record to find."""
    id: ID!
  ): paymentplan
  paymentplans(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: paymentplanFilter = {}

    """Specify to sort results."""
    sorting: [paymentplanSort!] = []
  ): PaymentplanConnection!
  payment(
    """The id of the record to find."""
    id: ID!
  ): payment
  payments(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: paymentFilter = {}

    """Specify to sort results."""
    sorting: [paymentSort!] = []
  ): PaymentConnection!
  rave(
    """The id of the record to find."""
    id: ID!
  ): rave
  raves(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: raveFilter = {}

    """Specify to sort results."""
    sorting: [raveSort!] = []
  ): RaveConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): user
  users(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: userFilter = {}

    """Specify to sort results."""
    sorting: [userSort!] = []
  ): UserConnection!
  review(
    """The id of the record to find."""
    id: ID!
  ): Review
  reviews(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ReviewFilter = {}

    """Specify to sort results."""
    sorting: [ReviewSort!] = []
  ): ReviewConnection!
  grant(
    """The id of the record to find."""
    id: ID!
  ): grant
  grants(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: grantFilter = {}

    """Specify to sort results."""
    sorting: [grantSort!] = []
  ): GrantConnection!
}

input paymentplanFilter {
  and: [paymentplanFilter!]
  or: [paymentplanFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  amount: FloatFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  postedById: IDFilterComparison
  isActive: PaymentplanIsActiveFilterComparison
}

input PaymentplanIsActiveFilterComparison {
  eq: Boolean
}

input paymentplanSort {
  field: paymentplanSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum paymentplanSortFields {
  id
  title
  amount
  postDate
  updatedAt
  postedById
  isActive
}

input userFilter {
  and: [userFilter!]
  or: [userFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  name: StringFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
}

input userSort {
  field: userSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum userSortFields {
  id
  email
  name
  postDate
  updatedAt
}

input grantFilter {
  and: [grantFilter!]
  or: [grantFilter!]
  id: IDFilterComparison
  role: StringFieldComparison
  resource: StringFieldComparison
  action: GrantActionsFilterComparison
  attributes: StringFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  postedById: IDFilterComparison
}

input GrantActionsFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: GrantActions
  neq: GrantActions
  gt: GrantActions
  gte: GrantActions
  lt: GrantActions
  lte: GrantActions
  like: GrantActions
  notLike: GrantActions
  iLike: GrantActions
  notILike: GrantActions
  in: [GrantActions!]
  notIn: [GrantActions!]
}

input grantSort {
  field: grantSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum grantSortFields {
  id
  role
  resource
  action
  attributes
  postDate
  updatedAt
  postedById
}

type Mutation {
  setPackOnLoop(input: SetPackOnLoopInput!): loop!
  createOneLoop(input: CreateOneLoopInput!): loop!
  updateOneLoop(input: UpdateOneLoopInput!): loop!
  deleteOneLoop(input: DeleteOneLoopInput!): LoopDeleteResponse!
  deleteManyLoops(input: DeleteManyLoopsInput!): DeleteManyResponse!
  setPostedByOnJob(input: SetPostedByOnJobInput!): job!
  createOneJob(input: CreateOneJobInput!): job!
  updateOneJob(input: UpdateOneJobInput!): job!
  deleteOneJob(input: DeleteOneJobInput!): JobDeleteResponse!
  deleteManyJobs(input: DeleteManyJobsInput!): DeleteManyResponse!
  setAuthorOnPack(input: SetAuthorOnPackInput!): pack!
  addAudioToPack(input: AddAudioToPackInput!): pack!
  setAudioOnPack(input: SetAudioOnPackInput!): pack!
  addPaymentsToPack(input: AddPaymentsToPackInput!): pack!
  setPaymentsOnPack(input: SetPaymentsOnPackInput!): pack!
  addReviewsToPack(input: AddReviewsToPackInput!): pack!
  setReviewsOnPack(input: SetReviewsOnPackInput!): pack!
  createOnePack(input: CreateOnePackInput!): pack!
  updateOnePack(input: UpdateOnePackInput!): pack!
  deleteOnePack(input: DeleteOnePackInput!): PackDeleteResponse!
  deleteManyPacks(input: DeleteManyPacksInput!): DeleteManyResponse!
  setPostedByOnPaymentplan(input: SetPostedByOnPaymentplanInput!): paymentplan!
  addPaymentsToPaymentplan(input: AddPaymentsToPaymentplanInput!): paymentplan!
  setPaymentsOnPaymentplan(input: SetPaymentsOnPaymentplanInput!): paymentplan!
  createOnePaymentplan(input: CreateOnePaymentplanInput!): paymentplan!
  updateOnePaymentplan(input: UpdateOnePaymentplanInput!): paymentplan!
  deleteOnePaymentplan(input: DeleteOnePaymentplanInput!): PaymentplanDeleteResponse!
  deleteManyPaymentplans(input: DeleteManyPaymentplansInput!): DeleteManyResponse!
  setPackOnPayment(input: SetPackOnPaymentInput!): payment!
  setPaymentPlanOnPayment(input: SetPaymentPlanOnPaymentInput!): payment!
  setUserOnPayment(input: SetUserOnPaymentInput!): payment!
  createOnePayment(input: CreateOnePaymentInput!): payment!
  updateOnePayment(input: UpdateOnePaymentInput!): payment!
  deleteOnePayment(input: DeleteOnePaymentInput!): PaymentDeleteResponse!
  deleteManyPayments(input: DeleteManyPaymentsInput!): DeleteManyResponse!
  setFollowerOnRave(input: SetFollowerOnRaveInput!): rave!
  setFollowingOnRave(input: SetFollowingOnRaveInput!): rave!
  createOneRave(input: CreateOneRaveInput!): rave!
  updateOneRave(input: UpdateOneRaveInput!): rave!
  deleteOneRave(input: DeleteOneRaveInput!): RaveDeleteResponse!
  deleteManyRaves(input: DeleteManyRavesInput!): DeleteManyResponse!
  addJobsToUser(input: AddJobsToUserInput!): user!
  setJobsOnUser(input: SetJobsOnUserInput!): user!
  addPacksToUser(input: AddPacksToUserInput!): user!
  setPacksOnUser(input: SetPacksOnUserInput!): user!
  addFollowersToUser(input: AddFollowersToUserInput!): user!
  setFollowersOnUser(input: SetFollowersOnUserInput!): user!
  addFollowingsToUser(input: AddFollowingsToUserInput!): user!
  setFollowingsOnUser(input: SetFollowingsOnUserInput!): user!
  addPaymentsToUser(input: AddPaymentsToUserInput!): user!
  setPaymentsOnUser(input: SetPaymentsOnUserInput!): user!
  addReviewsToUser(input: AddReviewsToUserInput!): user!
  setReviewsOnUser(input: SetReviewsOnUserInput!): user!
  createOneUser(input: CreateOneUserInput!): user!
  updateOneUser(input: UpdateOneUserInput!): user!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  setUserOnReview(input: SetUserOnReviewInput!): Review!
  setPackOnReview(input: SetPackOnReviewInput!): Review!
  createOneReview(input: CreateOneReviewInput!): Review!
  updateOneReview(input: UpdateOneReviewInput!): Review!
  deleteOneReview(input: DeleteOneReviewInput!): ReviewDeleteResponse!
  deleteManyReviews(input: DeleteManyReviewsInput!): DeleteManyResponse!
  createOneGrant(input: CreateOneGrantInput!): grant!
  updateOneGrant(input: UpdateOneGrantInput!): grant!
  deleteOneGrant(input: DeleteOneGrantInput!): GrantDeleteResponse!
  deleteManyGrants(input: DeleteManyGrantsInput!): DeleteManyResponse!
}

input SetPackOnLoopInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneLoopInput {
  """The record to create"""
  loop: AudioInputDTO!
}

input AudioInputDTO {
  """Example field (placeholder)"""
  name: String!

  """Example field (placeholder)"""
  genre: String!

  """Example field (placeholder)"""
  bpm: Int!

  """Example field (placeholder)"""
  path: String!

  """Example field (placeholder)"""
  audioType: AudioType!

  """Example field (placeholder)"""
  key: String

  """Example field (placeholder)"""
  tempo: Int!
  packId: ID!
}

input UpdateOneLoopInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: AudioUpdateDTO!
}

input AudioUpdateDTO {
  """Example field (placeholder)"""
  name: String

  """Example field (placeholder)"""
  genre: String

  """Example field (placeholder)"""
  bpm: Int

  """Example field (placeholder)"""
  path: String

  """Example field (placeholder)"""
  audioType: AudioType

  """Example field (placeholder)"""
  key: String

  """Example field (placeholder)"""
  tempo: Int
  packId: ID
}

input DeleteOneLoopInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyLoopsInput {
  """Filter to find records to delete"""
  filter: loopDeleteFilter!
}

input loopDeleteFilter {
  and: [loopDeleteFilter!]
  or: [loopDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  genre: StringFieldComparison
  bpm: IntFieldComparison
  audioType: AudioTypeFilterComparison
  key: StringFieldComparison
  tempo: IntFieldComparison
  packId: IDFilterComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
}

input SetPostedByOnJobInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneJobInput {
  """The record to create"""
  job: JobInputDTO!
}

input JobInputDTO {
  """Example field (placeholder)"""
  title: String!

  """Example field (placeholder)"""
  description: String!

  """Example field (placeholder)"""
  expirationDate: Timestamp!
  contact: String!
  location: String!
  postedById: ID!
}

input UpdateOneJobInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: JobInputDTO!
}

input DeleteOneJobInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyJobsInput {
  """Filter to find records to delete"""
  filter: jobDeleteFilter!
}

input jobDeleteFilter {
  and: [jobDeleteFilter!]
  or: [jobDeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  expirationDate: TimestampFieldComparison
  location: StringFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  postedById: IDFilterComparison
}

input SetAuthorOnPackInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddAudioToPackInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetAudioOnPackInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddPaymentsToPackInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetPaymentsOnPackInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddReviewsToPackInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetReviewsOnPackInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOnePackInput {
  """The record to create"""
  pack: PackInputDTO!
}

input PackInputDTO {
  """Example field (placeholder)"""
  name: String!
  description: String!

  """Example field (placeholder)"""
  price: Float = 0
  isLoop: Boolean = false

  """Example field (placeholder)"""
  type: PacketType!
  authorId: ID
  audio: [AudioInputDTO]
}

input UpdateOnePackInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: PackUpdateDTO!
}

input PackUpdateDTO {
  """Example field (placeholder)"""
  name: String
  description: String

  """Example field (placeholder)"""
  price: Float = 0
  isLoop: Boolean = false

  """Example field (placeholder)"""
  type: PacketType
  authorId: ID
  audio: [AudioInputDTO]
}

input DeleteOnePackInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPacksInput {
  """Filter to find records to delete"""
  filter: packDeleteFilter!
}

input packDeleteFilter {
  and: [packDeleteFilter!]
  or: [packDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  price: FloatFieldComparison
  type: PacketTypeFilterComparison
  isLoop: BooleanFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  authorId: IDFilterComparison
}

input SetPostedByOnPaymentplanInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddPaymentsToPaymentplanInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetPaymentsOnPaymentplanInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOnePaymentplanInput {
  """The record to create"""
  paymentplan: PaymentplanInputDTO!
}

input PaymentplanInputDTO {
  """Example field (placeholder)"""
  title: String!

  """Example field (placeholder)"""
  description: String!

  """Example field (placeholder)"""
  amount: Float!

  """Example field (placeholder)"""
  month: Int!

  """Example filed (placeholder)"""
  isActive: Boolean!
  postedById: ID!
}

input UpdateOnePaymentplanInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: PaymentplanInputDTO!
}

input DeleteOnePaymentplanInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPaymentplansInput {
  """Filter to find records to delete"""
  filter: paymentplanDeleteFilter!
}

input paymentplanDeleteFilter {
  and: [paymentplanDeleteFilter!]
  or: [paymentplanDeleteFilter!]
  id: IDFilterComparison
  title: StringFieldComparison
  amount: FloatFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  postedById: IDFilterComparison
  isActive: PaymentplanIsActiveFilterComparison
}

input SetPackOnPaymentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetPaymentPlanOnPaymentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetUserOnPaymentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOnePaymentInput {
  """The record to create"""
  payment: PaymentInputDTO!
}

input PaymentInputDTO {
  """Example field (placeholder)"""
  type: PlanType!

  """Example filed (placeholder)"""
  price: Int!

  """Example filed (placeholder)"""
  planStartDate: Timestamp!

  """Example filed (placeholder)"""
  planEndDate: Timestamp!

  """possible values are (MoPay) and (PayPal)"""
  paymentMode: PaymentModel!

  """Example filed (placeholder)"""
  confirmationToken: String

  """Example filed (placeholder)"""
  isActive: Boolean!
  packId: ID!
  paymentPlanId: ID!
  userId: ID!
}

input UpdateOnePaymentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: PaymentInputDTO!
}

input DeleteOnePaymentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPaymentsInput {
  """Filter to find records to delete"""
  filter: paymentDeleteFilter!
}

input paymentDeleteFilter {
  and: [paymentDeleteFilter!]
  or: [paymentDeleteFilter!]
  id: IDFilterComparison
  type: PlanTypeFilterComparison
  price: IntFieldComparison
  planStartDate: TimestampFieldComparison
  planEndDate: TimestampFieldComparison
  paymentMode: PaymentModelFilterComparison
  isActive: PaymentIsActiveFilterComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  packId: IDFilterComparison
  paymentPlanId: IDFilterComparison
  userId: IDFilterComparison
}

input SetFollowerOnRaveInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetFollowingOnRaveInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneRaveInput {
  """The record to create"""
  rave: RaveInputDTO!
}

input RaveInputDTO {
  """Example field (placeholder)"""
  followerId: Int!

  """Example field (placeholder)"""
  followingId: Int!
}

input UpdateOneRaveInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: RaveInputDTO!
}

input DeleteOneRaveInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyRavesInput {
  """Filter to find records to delete"""
  filter: raveDeleteFilter!
}

input raveDeleteFilter {
  and: [raveDeleteFilter!]
  or: [raveDeleteFilter!]
  id: IDFilterComparison
  followerId: IntFieldComparison
  followingId: IntFieldComparison
}

input AddJobsToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetJobsOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddPacksToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetPacksOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddFollowersToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetFollowersOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddFollowingsToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetFollowingsOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddPaymentsToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetPaymentsOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddReviewsToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetReviewsOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneUserInput {
  """The record to create"""
  user: UserInputDTO!
}

input UserInputDTO {
  email: String!
  password: String!
  emailVerified: Boolean
  image: String
  name: String!
  about: String
  role: String = "user"
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UserUpdateDTO!
}

input UserUpdateDTO {
  email: String
  password: String
  emailVerified: Boolean
  image: String
  name: String
  about: String
  role: String = "user"
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: userDeleteFilter!
}

input userDeleteFilter {
  and: [userDeleteFilter!]
  or: [userDeleteFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  name: StringFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
}

input SetUserOnReviewInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetPackOnReviewInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneReviewInput {
  """The record to create"""
  review: ReviewInputDTO!
}

input ReviewInputDTO {
  review: String!
  userId: ID!
  packId: ID!
}

input UpdateOneReviewInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ReviewInputDTO!
}

input DeleteOneReviewInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyReviewsInput {
  """Filter to find records to delete"""
  filter: ReviewDeleteFilter!
}

input ReviewDeleteFilter {
  and: [ReviewDeleteFilter!]
  or: [ReviewDeleteFilter!]
  id: IDFilterComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  userId: IDFilterComparison
  packId: IDFilterComparison
}

input CreateOneGrantInput {
  """The record to create"""
  grant: GrantDTO!
}

input GrantDTO {
  """Example field (placeholder)"""
  role: String!

  """Example field (placeholder)"""
  resource: String!
  action: GrantActions!

  """
  
        all attributes => ['*'],
        all attributes except specific fields => ['*', '!id']
        only selected attributes => ['id', 'name']
        
  """
  attributes: String!
  postedById: ID!
}

input UpdateOneGrantInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: GrantDTO!
}

input DeleteOneGrantInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyGrantsInput {
  """Filter to find records to delete"""
  filter: grantDeleteFilter!
}

input grantDeleteFilter {
  and: [grantDeleteFilter!]
  or: [grantDeleteFilter!]
  id: IDFilterComparison
  role: StringFieldComparison
  resource: StringFieldComparison
  action: GrantActionsFilterComparison
  attributes: StringFieldComparison
  postDate: TimestampFieldComparison
  updatedAt: TimestampFieldComparison
  postedById: IDFilterComparison
}
